#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CAvplayerctrl wrapper class

class CAvplayerctrl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CAvplayerctrl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x7CB0D592, 0x1870, 0x4608, { 0x81, 0x3B, 0x8D, 0xBB, 0xCD, 0x3D, 0xAB, 0x57 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DAVPlayer

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long Login(LPCTSTR strServerIP, unsigned short nServerPort, LPCTSTR strAccount, LPCTSTR strPassword, long nUserPtr)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_UI2 VTS_BSTR VTS_BSTR VTS_I4 ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strServerIP, nServerPort, strAccount, strPassword, nUserPtr);
		return result;
	}
	void Logout()
	{
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long PlayStream(LPCTSTR strDeviceID, long hWnd, long nEnalbeHWAccel)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strDeviceID, hWnd, nEnalbeHWAccel);
		return result;
	}
	long GetDeviceID(BSTR * strDeviceList, long * nDeviceCount)
	{
		long result;
		static BYTE parms[] = VTS_PBSTR VTS_PI4 ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strDeviceList, nDeviceCount);
		return result;
	}
	void StopPlay(LPCTSTR strDeviceID, long hWnd)
	{
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strDeviceID, hWnd);
	}
	long GetErrorMessage(long nErrorCode, BSTR * strErrorMessage)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PBSTR ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, parms, nErrorCode, strErrorMessage);
		return result;
	}
	void FreeString(BSTR * strString)
	{
		static BYTE parms[] = VTS_PBSTR ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, strString);
	}
	long GetDeviceWindow(LPCTSTR strDeviceID, long * hWndArray, long * nArraySize)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strDeviceID, hWndArray, nArraySize);
		return result;
	}
	long GetWindowDevice(long hWnd, BSTR * strDeviceID)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PBSTR ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms, hWnd, strDeviceID);
		return result;
	}
	long PlayComboStream(LPCTSTR strDevice1, LPCTSTR strDevice2, long hWnd, long nEnableHWAccel, long nArangeMode)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strDevice1, strDevice2, hWnd, nEnableHWAccel, nArangeMode);
		return result;
	}
	long SetPlayComboBorder(double dwSpreadHei)
	{
		long result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms, dwSpreadHei);
		return result;
	}
	long SetPlayComboBorderEx(LPCTSTR strDevice1, LPCTSTR strDevice2, double fSpreadHei)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_R8 ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strDevice1, strDevice2, fSpreadHei);
		return result;
	}

// Properties
//

long GetRecvTimeout()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}
void SetRecvTimeout(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}
long GetReportInterval()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}
void SetReportInterval(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}


};
